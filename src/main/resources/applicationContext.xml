<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jee="http://www.springframework.org/schema/jee"
       xmlns:lang="http://www.springframework.org/schema/lang"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:sec="http://www.springframework.org/schema/security"

       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
          http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
          http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
          http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd
          http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang.xsd
          http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
          http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd
          http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
">

    <sec:http create-session="stateless" use-expressions="true">
        <!-- On Glassfish, dev ports are 8080 and 8181, whereas on
        production its 80 and 443 -->
        <sec:port-mappings>
            <sec:port-mapping http="8080" https="8181"/>
        </sec:port-mappings>
    
        <sec:intercept-url pattern="/api/v1/clientProfiles/**" method="GET"
                       access="permitAll" requires-channel="https" />
        <sec:intercept-url pattern="/api/v1/clientProfiles/**" method="DELETE"
                       access="hasRole('ROLE_ADMIN')" requires-channel="https" />
        <sec:intercept-url pattern="/api/v1/clientProfiles/**" method="PUT"
                       access="hasRole('ROLE_ADMIN')" requires-channel="https" />
        <sec:intercept-url pattern="/api/v1/clientProfiles/**" method="POST"
                       access="hasAnyRole('ROLE_ADMIN','ROLE_USER')" requires-channel="https" />
        <sec:intercept-url 
            pattern="/**" 
            access="permitAll" requires-channel="https"/>
        <sec:http-basic />
        <sec:headers />
    </sec:http>

    <sec:authentication-manager alias="authenticationManager">
        <sec:authentication-provider>
            <sec:password-encoder ref="encoderBean">
                <sec:salt-source user-property="username"/>
            </sec:password-encoder>
            <sec:jdbc-user-service data-source-ref="dataSource" />
            
            <!-- if not using a database for accounts, hard-code them here
            <sec:user-service id="userService">
                <sec:user name="admin" password="admin" authorities="admin" />
                <sec:user name="user" password="user" authorities="customer, admin" />
            </sec:user-service>
            -->
        </sec:authentication-provider>
    </sec:authentication-manager>

    <bean id="encoderBean" class="org.springframework.security.authentication.encoding.ShaPasswordEncoder">
        <constructor-arg value="512" />
        <property name="iterations" value="1024"/>
    </bean>
    
    <!-- Server managed connection pool accessed via JNDI -->
    <jee:jndi-lookup id="dataSource" jndi-name="jdbc/clientProfiles"/>
</beans>